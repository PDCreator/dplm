import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { useAuth } from '../AuthContext';
import API from '../components/api';

function PlaceDetail() {
  const { id } = useParams(); // ID –º–µ—Å—Ç–∞ –∏–∑ URL
  const { user } = useAuth();

  const [place, setPlace] = useState(null);
  const [likeCount, setLikeCount] = useState(0);
  const [likedByUser, setLikedByUser] = useState(false);
  const [comments, setComments] = useState([]);
  const [commentText, setCommentText] = useState('');
  const [isFavorited, setIsFavorited] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

  useEffect(() => {
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ
    fetch(`${API}/places/${id}`)
      .then(res => res.json())
      .then(setPlace);

    // –ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏
    const likeUrl = user 
      ? `${API}/likes/place/${id}?user_id=${user.id}`
      : `${API}/likes/place/${id}`;

    fetch(likeUrl)
      .then(res => res.json())
      .then(data => {
        setLikeCount(data.likeCount);
        setLikedByUser(data.likedByUser || false);
      });

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    fetch(`${API}/comments/place/${id}`)
      .then(res => res.json())
      .then(setComments);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if (user) {
      fetch(`${API}/favorites/place/${id}?user_id=${user.id}`)
        .then(res => res.json())
        .then(data => {
          setIsFavorited(data.isFavorited || false);
        });
    }
  }, [id, user]);

  // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const addToFavorites = async (placeId) => {
    if (!user) return alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    if (isFavorited) return alert('–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º'); // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –º–µ—Å—Ç–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º

    const res = await fetch(`${API}/favorites/${placeId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: user.id }),
    });

    if (res.ok) {
      setIsFavorited(true); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    }
  };

  const toggleLike = async () => {
    if (!user) return alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏');

    await fetch(`${API}/likes/place/${id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: user.id }),
    });

    const res = await fetch(`${API}/likes/place/${id}?user_id=${user.id}`);
    const data = await res.json();
    setLikeCount(data.likeCount);
    setLikedByUser(data.likedByUser);
  };

  const submitComment = async () => {
    if (!user) return alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å');
    if (!commentText.trim()) return;

    const res = await fetch(`${API}/comments/place/${id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: user.id, content: commentText }),
    });

    if (res.ok) {
      setCommentText('');
      const updated = await fetch(`${API}/comments/place/${id}`).then(res => res.json());
      setComments(updated);
    }
  };

  if (!place) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div style={{ padding: '1rem' }}>
      <h2>{place.name}</h2>
      <p>{place.description}</p>
      <p><small>–î–æ–±–∞–≤–ª–µ–Ω–æ: {new Date(place.created_at).toLocaleString()}</small></p>

      <div style={{ marginTop: '1rem' }}>
        <button onClick={toggleLike}>
          {likedByUser ? '‚ù§Ô∏è –£–±—Ä–∞—Ç—å –ª–∞–π–∫' : 'ü§ç –õ–∞–π–∫–Ω—É—Ç—å'}
        </button>
        <span style={{ marginLeft: '0.5rem' }}>{likeCount} –ª–∞–π–∫–æ–≤</span>
      </div>

      <div style={{ marginTop: '1rem' }}>
        <button onClick={() => addToFavorites(id)} disabled={isFavorited}>
          {isFavorited ? '‚≠ê –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
        </button>
      </div>

      <div style={{ marginTop: '2rem' }}>
        <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h4>

        {user ? (
          <div>
            <textarea
              value={commentText}
              onChange={(e) => setCommentText(e.target.value)}
              rows={3}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
              style={{ width: '100%', marginBottom: '0.5rem' }}
            />
            <button onClick={submitComment}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
          </div>
        ) : (
          <p>–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, <a href="/login">–≤–æ–π–¥–∏—Ç–µ</a>.</p>
        )}

        {comments.length > 0 ? (
          <ul>
            {comments.map((c) => (
              <li key={c.id}>
                <b>{c.username}</b> ({new Date(c.created_at).toLocaleString()}):<br />
                {c.content}
              </li>
            ))}
          </ul>
        ) : (
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>
        )}
      </div>
    </div>
  );
}

export default PlaceDetail;
