const express = require('express');
const router = express.Router();
const db = require('../db');
const nodemailer = require('nodemailer');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'flakerdead@gmail.com',
    pass: 'lwxt qcra ygmy nprf'
  }
});

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
function sendEmail(to, subject, html) {
  return transporter.sendMail({
    from: 'flakerdead@gmail.com',
    to,
    subject,
    html
  });
}

// üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–µ—Å—Ç–∞–º–∏
router.get('/', (req, res) => {
  db.query('SELECT * FROM news ORDER BY created_at DESC', (err, newsResults) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    
    if (newsResults.length === 0) return res.json([]);
    
    const newsIds = newsResults.map(n => n.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –º–µ—Å—Ç–∞–º–∏
    db.query(`
      SELECT np.news_id, p.id, p.title, p.description, 
        (SELECT image_url FROM place_images WHERE place_id = p.id LIMIT 1) AS image
      FROM news_places np
      JOIN places p ON np.place_id = p.id
      WHERE np.news_id IN (?)
    `, [newsIds], (placeErr, placeResults) => {
      if (placeErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç:', placeErr);
        return res.json(newsResults); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –º–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
      const placesByNews = placeResults.reduce((acc, place) => {
        if (!acc[place.news_id]) acc[place.news_id] = [];
        acc[place.news_id].push(place);
        return acc;
      }, {});
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
      const newsWithPlaces = newsResults.map(news => ({
        ...news,
        places: placesByNews[news.id] || []
      }));
      
      res.json(newsWithPlaces);
    });
  });
});


// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å —Å –º–µ—Å—Ç–∞–º–∏
router.post('/', (req, res) => {
  const { title, content, placeIds } = req.body;

  if (!title || !content || !Array.isArray(placeIds)) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –º–µ—Å—Ç–∞' });
  }

  const insertNewsQuery = 'INSERT INTO news (title, content, created_at) VALUES (?, ?, NOW())';
  db.query(insertNewsQuery, [title, content], (err, result) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' });

    const newsId = result.insertId;

    // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–µ—Å—Ç–∞–º
    const values = placeIds.map(placeId => [newsId, placeId]);
    db.query('INSERT INTO news_places (news_id, place_id) VALUES ?', [values], (err2) => {
      if (err2) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –º–µ—Å—Ç:', err2);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö –¥–ª—è –ø–∏—Å—å–º–∞
      db.query('SELECT id, title FROM places WHERE id IN (?)', [placeIds], (placeErr, places) => {
        if (placeErr) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö:', placeErr);
          return res.status(500).json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å' });
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ id –º–µ—Å—Ç–∞ -> –Ω–∞–∑–≤–∞–Ω–∏–µ
        const placeMap = places.reduce((acc, place) => {
          acc[place.id] = place.title;
          return acc;
        }, {});

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email
        const usersQuery = `
          SELECT DISTINCT u.email, f.place_id FROM users u
          JOIN favorites f ON f.user_id = u.id
          WHERE f.place_id IN (?) AND u.email IS NOT NULL AND u.email_verified = 1
        `;

        db.query(usersQuery, [placeIds], (err3, users) => {
          if (err3) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err3);
            return res.status(500).json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å' });
          }

          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–∞)
          const userEmails = [...new Set(users.map(u => u.email))];

          // –†–∞—Å—Å—ã–ª–∫–∞ email
          const emailPromises = userEmails.map(email => {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
            const userPlaces = users
              .filter(u => u.email === email)
              .map(u => placeMap[u.place_id]);

            const placeTitles = userPlaces.map(title => `‚Ä¢ ${title}`).join('<br>');
            const newsLink = `http://localhost:3000/news/${newsId}`;

            return sendEmail(
              email,
              '–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö',
              `
                <h3>–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –≤–∞—à–∏–º–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏:</h3>
                ${placeTitles}
                <h4 style="margin-top: 20px;">${title}</h4>
                <p>${content}</p>
                <p style="margin-top: 20px;">
                  <a href="${newsLink}" style="
                    background-color: #4CAF50;
                    color: white;
                    padding: 10px 20px;
                    text-decoration: none;
                    border-radius: 5px;
                  ">–ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å</a>
                </p>
              `
            );
          });

          Promise.allSettled(emailPromises)
            .then(() => {
              res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –ø–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', id: newsId });
            })
            .catch(() => {
              res.status(500).json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –ø–∏—Å—å–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' });
            });
        });
      });
    });
  });
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
router.put('/:id', (req, res) => {
  const { title, content } = req.body;
  const { id } = req.params;

  if (!title || !content) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ' });
  }

  db.query('UPDATE news SET title = ?, content = ? WHERE id = ?', [title, content, id], (err) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
    res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
router.delete('/:id', (req, res) => {
  const { id } = req.params;

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  db.beginTransaction(err => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });

    // 1. –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏
    db.query('DELETE FROM comments WHERE target_type = "news" AND target_id = ?', [id], (err) => {
      if (err) return db.rollback(() => {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' });
      });

      // 2. –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
      db.query('DELETE FROM likes WHERE target_type = "news" AND target_id = ?', [id], (err) => {
        if (err) return db.rollback(() => {
          res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤' });
        });

        // 3. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –º–µ—Å—Ç–∞–º–∏
        db.query('DELETE FROM news_places WHERE news_id = ?', [id], (err) => {
          if (err) return db.rollback(() => {
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π —Å –º–µ—Å—Ç–∞–º–∏' });
          });

          // 4. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –Ω–æ–≤–æ—Å—Ç—å
          db.query('DELETE FROM news WHERE id = ?', [id], (err) => {
            if (err) return db.rollback(() => {
              res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' });
            });

            // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            db.commit(err => {
              if (err) return db.rollback(() => {
                res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
              });
              
              res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã' });
            });
          });
        });
      });
    });
  });
});

// üîç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID —Å –º–µ—Å—Ç–∞–º–∏
router.get('/:id', (req, res) => {
  const { id } = req.params;

  db.query('SELECT * FROM news WHERE id = ?', [id], (err, newsResults) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' });
    if (newsResults.length === 0) return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    
    const news = newsResults[0];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    db.query(`
      SELECT p.id, p.title, p.description, 
        (SELECT image_url FROM place_images WHERE place_id = p.id LIMIT 1) AS image
      FROM places p
      JOIN news_places np ON np.place_id = p.id
      WHERE np.news_id = ?
    `, [id], (placeErr, placeResults) => {
      if (placeErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç:', placeErr);
        return res.json(news); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ –º–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
      
      news.places = placeResults;
      res.json(news);
    });
  });
});
// üîç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –º–µ—Å—Ç—É
router.get('/by-place/:placeId', (req, res) => {
  const { placeId } = req.params;
  const query = `
    SELECT n.* FROM news n
    JOIN news_places np ON np.news_id = n.id
    WHERE np.place_id = ?
    ORDER BY n.created_at DESC
  `;
  db.query(query, [placeId], (err, results) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π' });
    res.json(results);
  });
});


module.exports = router;
